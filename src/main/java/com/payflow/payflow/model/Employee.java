package com.payflow.payflow.model;

import jakarta.persistence.*;
import java.time.LocalDate;

/**
 * JPA Entity representing an employee in the PayFlow system.
 * This class maps to the `employee` table in the database and contains
 * all the personal and professional details of an employee.
 */
@Entity
public class Employee {

    /**
     * The unique identifier for the employee.
     * It is auto-generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The full name of the employee.
     */
    private String name;

    /**
     * The email address of the employee, used for communication and login.
     */
    private String email;

    /**
     * The phone number of the employee.
     */
    private String phone;

    /**
     * The residential address of the employee.
     */
    private String address;

    /**
     * The job position or title of the employee.
     */
    private String position;

    /**
     * The date the employee started working.
     */
    @Column(name = "start_date")
    private LocalDate startDate;

    /**
     * The number of total leaves an employee is allocated annually.
     */
    private Integer leaves;

    /**
     * The current status of the employee (e.g., "ACTIVE", "INACTIVE").
     */
    private String status;

    /**
     * The password for the employee's account.
     */
    private String password;

    /**
     * A flag indicating if the employee is logging in for the first time.
     * Defaults to `true`.
     */
    @Column(name = "first_login")
    private Boolean firstLogin = true;

    /**
     * A detailed description of the employee's educational background.
     * Stored as `LONGTEXT` to accommodate longer text.
     */
    @Column(columnDefinition = "LONGTEXT")
    private String education;

    /**
     * A detailed description of the employee's professional experiences.
     * Stored as `LONGTEXT` to accommodate longer text.
     */
    @Column(columnDefinition = "LONGTEXT")
    private String experiences;

    /**
     * The role of the employee in the system (e.g., "EMPLOYEE", "MANAGER", "HR").
     */
    private String role;

    /**
     * The age of the employee.
     */
    @Column(name = "age", nullable = false)
    private Integer age;

    /**
     * The remaining leave balance for the employee.
     */
    @Column(name = "leave_balance")
    private Integer leaveBalance;

    /**
     * A field for storing past experience details.
     */
    @Column(name = "past_experience")
    private String pastExperience;

    /**
     * The total years of professional experience of the employee.
     */
    @Column(name = "total_experience", nullable = false)
    private Integer totalExperience;

    /**
     * The Provident Fund (PF) number of the employee.
     */
    @Column(name = "pf_number")
    private String pfNumber;

    /**
     * The username for the employee's account.
     */
    private String username;

    /**
     * The ID of the employee's direct manager.
     */
    @Column(name = "manager_id")
    private Long managerId;

    /**
     * A counter for the number of days for which salary has been deducted due to unpaid leave.
     * Defaults to `0`.
     */
    @Column(name = "salary_deduction_days")
    private Integer salaryDeductionDays = 0;

    /**
     * The employee's default monthly salary.
     * Defaults to `50000.0`.
     */
    @Column(name = "monthly_salary")
    private Double monthlySalary = 50000.0;

    // New fields to track leave usage for payslip calculation
    @Column(name = "leaves_used_this_month")
    private Integer leavesUsedThisMonth = 0;

    @Column(name = "total_leaves_used_this_year")
    private Integer totalLeavesUsedThisYear = 0;

    // Constructors
    public Employee() {}

    /**
     * A constructor for creating a new Employee with basic details.
     * It sets default values for role, status, and leave balances.
     * @param name The name of the new employee.
     * @param email The email of the new employee.
     */
    public Employee(String name, String email) {
        this.name = name;
        this.email = email;
        this.role = "EMPLOYEE";
        this.firstLogin = true;
        this.status = "ACTIVE";
        this.leaves = 12;
        this.leaveBalance = 12;
        this.age = 25; // Default age
        this.totalExperience = 0; // Default experience
    }

    // Getters and Setters
    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public String getPhone() { return phone; }
    public void setPhone(String phone) { this.phone = phone; }

    public String getAddress() { return address; }
    public void setAddress(String address) { this.address = address; }

    public String getPosition() { return position; }
    public void setPosition(String position) { this.position = position; }

    public LocalDate getStartDate() { return startDate; }
    public void setStartDate(LocalDate startDate) { this.startDate = startDate; }

    public Integer getLeaves() { return leaves; }
    public void setLeaves(Integer leaves) { this.leaves = leaves; }

    public String getStatus() { return status; }
    public void setStatus(String status) { this.status = status; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }

    public Boolean getFirstLogin() { return firstLogin; }
    public void setFirstLogin(Boolean firstLogin) { this.firstLogin = firstLogin; }

    public String getEducation() { return education; }
    public void setEducation(String education) { this.education = education; }

    public String getExperiences() { return experiences; }
    public void setExperiences(String experiences) { this.experiences = experiences; }

    public String getRole() { return role; }
    public void setRole(String role) { this.role = role; }

    public Integer getAge() { return age; }
    public void setAge(Integer age) { this.age = age; }

    public Integer getLeaveBalance() { return leaveBalance; }
    public void setLeaveBalance(Integer leaveBalance) { this.leaveBalance = leaveBalance; }

    public String getPastExperience() { return pastExperience; }
    public void setPastExperience(String pastExperience) { this.pastExperience = pastExperience; }

    public Integer getTotalExperience() { return totalExperience; }
    public void setTotalExperience(Integer totalExperience) { this.totalExperience = totalExperience; }

    public String getPfNumber() { return pfNumber; }
    public void setPfNumber(String pfNumber) { this.pfNumber = pfNumber; }

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public Long getManagerId() { return managerId; }
    public void setManagerId(Long managerId) { this.managerId = managerId; }

    public Integer getSalaryDeductionDays() { return salaryDeductionDays; }
    public void setSalaryDeductionDays(Integer salaryDeductionDays) { this.salaryDeductionDays = salaryDeductionDays; }

    public Double getMonthlySalary() { return monthlySalary; }
    public void setMonthlySalary(Double monthlySalary) { this.monthlySalary = monthlySalary; }

    // New getters and setters for the added leave fields
    public Integer getLeavesUsedThisMonth() {
        return leavesUsedThisMonth;
    }

    public void setLeavesUsedThisMonth(Integer leavesUsedThisMonth) {
        this.leavesUsedThisMonth = leavesUsedThisMonth;
    }

    public Integer getTotalLeavesUsedThisYear() {
        return totalLeavesUsedThisYear;
    }

    public void setTotalLeavesUsedThisYear(int totalLeavesUsedThisYear) {
        this.totalLeavesUsedThisYear = totalLeavesUsedThisYear;
    }
    
    /**
     * Transient field to indicate if this employee has a payment hold.
     * This field is not stored in the database but can be set programmatically.
     */
    @Transient
    private boolean hasPaymentHold = false;
    
    /**
     * Check if the employee has a payment hold.
     * 
     * @return true if the employee has a payment hold, false otherwise.
     */
    public boolean hasPaymentHold() {
        return hasPaymentHold;
    }
    
    /**
     * Set whether the employee has a payment hold.
     * 
     * @param hasPaymentHold true if the employee has a payment hold, false otherwise.
     */
    public void setHasPaymentHold(boolean hasPaymentHold) {
        this.hasPaymentHold = hasPaymentHold;
    }
}